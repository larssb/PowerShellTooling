{
	"functionTemplateDynamicParameters" : {
		"prefix": "functionTemplateDynParm",
		"body": [
			"###################",
			"# FUNCTION - PREP #",
			"###################",
			"#Requires -",
			"\r",
			"####################",
			"# FUNCTION - START #",
			"####################",
			"function \"FUNCTION_NAME\"() {",
			"<#",
			".DESCRIPTION",
			"\tLong description",
			".INPUTS",
			"\tInputs (if any)",
			".OUTPUTS",
			"\tOutputs (if any)",
			".NOTES",
			"\tGeneral notes",
			".EXAMPLE",
			"\tPS C:\\> <example usage>",
			"\tExplanation of what the example does",
			".PARAMETER NAME_OF_THE_PARAMETER_WITHOUT_THE_QUOTES",
			"\tParameter HelpMessage text",
			"\tAdd a .PARAMETER per parameter",
			"#>",
			"\r",
			"\t# Define parameters",
			"\t[CmdletBinding()]",
			"\t[OutputType([SPECIFY_THE_RETURN_TYPE_OF_THE_FUNCTION_HERE])]",
			"\tparam(",
			"\t\t[Parameter(Mandatory=$$true, ParameterSetName=\"NAME\", HelpMessage=\"MESSAGE\")]",
			"\t\t[ValidateNotNullOrEmpty()]",
			"\t\t$$NAMEOFPARAMETER",
			"\t)",
			"\r",
			"\tDynamicParam {",
			"\t\tif($$PARAMETER -eq \"\") {",
			"\t\t\t# Configure parameter",
			"\t\t\t$$attributes = new-object System.Management.Automation.ParameterAttribute;",
			"\t\t\t$$attributes.Mandatory = $$true;",
			"\t\t\t$$attributes.HelpMessage = \" PARAMETER DESCRIPTION .\";",
			"\t\t\t$$ValidateNotNullOrEmpty = New-Object Management.Automation.ValidateNotNullOrEmptyAttribute;",
			"\r",
			"\t\t\t# Define parameter collection",
			"\t\t\t$$attributeCollection = new-object -Type System.Collections.ObjectModel.Collection[System.Attribute];",
			"\t\t\t$$attributeCollection.Add($$attributes);",
			"\t\t\t$$attributeCollection.Add($$ValidateNotNullOrEmpty);",
			"\r",
			"\t\t\t# Prepare to return & expose the parameter",
			"\t\t\t$$ParameterName = \"PARAMETER_NAME\";",
			"\t\t\t[Type]$$ParameterType = \"String\";",
			"\t\t\t$$Parameter = New-Object Management.Automation.RuntimeDefinedParameter($$ParameterName, $$ParameterType, $$AttributeCollection);",
			"\t\t\tif ($$psboundparameters.ContainsKey('DefaultValue')) {",
			"\t\t\t\t$$Parameter.Value = $$DefaultValue;",
			"\t\t\t}",
			"\t\t\t$$paramDictionary = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary;",
			"\t\t\t$$paramDictionary.Add($$ParameterName, $$Parameter);",
			"\r",
			"\t\t\treturn $$paramDictionary;",
			"\t\t}",
			"\t}",
			"\r",
			"\t#############",
			"\t# Execution #",
			"\t#############",
			"\tBegin {};",
			"\tProcess {",
			"\r",
			"\t};",
			"\tEnd{};",
			"}",
			"\r",
			"Export-ModuleMember -Function \"\"",
			"##################",
			"# FUNCTION - END #",
			"##################"],
		"description": "PowerShell advanced function template with dynamic parameter."
	},
	"functionTemplate" : {
		"prefix": "functionTemplate",
		"body": [
			"#Requires -",
			"\r",
			"function FUNCTION_NAME() {",
			"<#",
			".DESCRIPTION",
			"\tLong description",
			".INPUTS",
			"\tInputs (if any)",
			".OUTPUTS",
			"\tOutputs (if any)",
			".NOTES",
			"\tGeneral notes",
			".EXAMPLE",
			"\tPS C:\\> <example usage>",
			"\tExplanation of what the example does",
			".PARAMETER NAME_OF_THE_PARAMETER_WITHOUT_THE_QUOTES",
			"\tParameter_HelpMessage_text",
			"\tAdd_a_.PARAMETER_per_parameter",
			"#>",
			"\r",
			"\t# Define parameters",
			"\t[CmdletBinding()]",
			"\t[OutputType([SPECIFY_THE_RETURN_TYPE_OF_THE_FUNCTION_HERE])]",
			"\tparam(",
			"\t\t[Parameter(Mandatory=$$true, ParameterSetName=\"NAME\", HelpMessage=\"MESSAGE\")]",
			"\t\t[ValidateNotNullOrEmpty()]",
			"\t\t$$NAMEOFPARAMETER",
			"\t)",
			"\r",
			"\t#############",
			"\t# Execution #",
			"\t#############",
			"\r",
			"}"],
		"description": "PowerShell advanced function template."
	},
	"functionTemplateNoHelp" : {
		"prefix": "functionTemplateNoHelp",
		"body": [
			"####################",
			"# FUNCTION - PREP #",
			"####################",
			"#Requires -",
			"\r",
			"####################",
			"# FUNCTION - START #",
			"####################",
			"function \"FUNCTION_NAME\"() {",
			"\t# Define parameters",
			"\t[CmdletBinding()]",
			"\t[OutputType([SPECIFY_THE_RETURN_TYPE_OF_THE_FUNCTION_HERE])]",
			"\tparam(",
			"\t\t[Parameter(Mandatory=$$true, ParameterSetName=\"NAME\", HelpMessage=\"MESSAGE\")]",
			"\t\t[ValidateNotNullOrEmpty()]",
			"\t\t$$NAMEOFPARAMETER",
			"\t)",
			"\r",
			"\t#############",
			"\t# Execution #",
			"\t#############",
			"}",
			"##################",
			"# FUNCTION - END #",
			"##################"],
		"description": "PowerShell advanced function template with no help."
	},
	"scriptTemplate" : {
		"prefix": "scriptTemplate",
		"body": [
			"<#",
			"\t- Script description",
			"\r",
			"\t- Potential requirements",
			"#>",
			"#################",
			"# SCRIPT - PREP #",
			"#################",
			"#Requires -",
			"\r",
			"##################",
			"# SCRIPT - START #",
			"##################",
			"\r",
			"################",
			"# SCRIPT - END #",
			"################"],
		"description": "PowerShell script (.ps1) template."
	},
	"helpPsFunction" : {
		"prefix": "helpPsFunction",
		"body": [
			"<#",
			".DESCRIPTION",
			"\tLong description",
			".INPUTS",
			"\tInputs (if any)",
			".OUTPUTS",
			"\tOutputs (if any)",
			".NOTES",
			"\tGeneral notes",
			".EXAMPLE",
			"\tPS C:\\> <example usage>",
			"\tExplanation of what the example does",
			".PARAMETER NAME_OF_THE_PARAMETER_WITHOUT_THE_QUOTES",
			"\tParameter HelpMessage text",
			"\tAdd a .PARAMETER per parameter",
			"#>"
		],
		"description": "PowerShell function help section."
	},
	"here-string": {
		"prefix": "here-string",
		"body": [
			"\\$hereString = @\"",
			"\r",
			"\"@"
		]
	},
	"dscConf": {
		"prefix": "dscConf",
		"body": [
			"<#",
			"\t.SYNOPSIS",
			"\t\tWRITE_HERE",
			"#>",
			"Configuration CONFIGURATION_NAME_HERE {",
			"\t\r",
			"\t\r",
			"}"
		]
	},
	"dscCompositeConf": {
		"prefix": "dscCompositeConf",
		"body": [
			"<#",
			"\t.SYNOPSIS",
			"\t\tWRITE_HERE",
			"#>",
			"Configuration CONFIGURATION_NAME_HERE {",
			"\tparam (",
			"\t\t# PARAMETER_DESCRIPTION",
			"\t\t[Parameter(Mandatory)]",
			"\t\t[PARAMETER_TYPE]\\$PARAMETER_NAME",
			"\t)",
			"\t\t# Import the module/s that defines custom resources",
			"\r",
			"\t\tImport-DscResource -Module MODULE_1,MODULE_2",
			"}"
		]
	},
	"": {
		"prefix": "dscResource",
		"body": [
			"<#",
			"\tEXPLAIN_WHAT_IT_DOES",
			"#>",
			"# Define the Ensure property as Enum. A DSC resource requirement.",
			"enum Ensure",
			"{",
			"\tDEFINE_THE_ENUM_VALUES_TO_USE_FOR_THIS_RESOURCE",
			"}",
			"\r",
			"# Declare and define the DSC resource class",
			"[DscResource()]",
			"class CLASS_NAME {",
			"\t##############",
			"\t# PROPERTIES #",
			"\t##############",
			"\t# The values of all properties marked as keys must combine to uniquely identify a resource instance within a configuration.",
			"\t[DscProperty(Key)]",
			"\t[string]\\$KEY",
			"\r",
			"\t[DscProperty(Mandatory)]",
			"\t[Ensure]\\$Ensure",
			"\r",
			"\t#############################",
			"\t# MAIN DSC RESOURCE METHODS #",
			"\t#############################",
			"\t<#",
			"\t\tEXPLAIN_WHAT_IT_DOES",
			"\r",
			"\t\tN.B.: This method is equivalent of the Set-TargetResource script function. It sets the resource to the desired state.",
			"\t#>",
			"\t[Void] Set() {",
			"\r",
			"\t}",
			"\r",
			"\t<#",
			"\t\tEXPLAIN_WHAT_IT_DOES",
			"\r",
			"\t\tN.B.: This method is equivalent of the Test-TargetResource script function. It should return True or False, showing whether ",
			"\t\tthe resource is in a desired state.",
			"\t#>",
			"\t[bool] Test() {",
			"\r",
			"\t}",
			"\r",
			"\t<#",
			"\t\tEXPLAIN_WHAT_IT_DOES",
			"\r",
			"\t\tN.B.: This method is equivalent of the Get-TargetResource script function. The implementation should use the keys to find ",
			"\t\tappropriate resources. This method returns an instance of this class with the updated key properties.",
			"\t#>",
			"\t[TYPE_IS_THE_CLASSNAME] Get() {",
			"\r",
			"\t}",
			"\r",
			"\t###############################",
			"\t# DSC RESOURCE HELPER METHODS #",
			"\t###############################",
			"\r",
			"}"
		]
	}
}